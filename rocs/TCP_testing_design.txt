Willie Reed


The first thing to verify is that the TcpServer initializes correctly.
This can be done by checking that the newly made object (call it tcp) is not nil and that tcp.http is also not nil.

The next point of order is to make sure that the return value of tcp.start is what it should be (not obvious in the specification).

Next, we must establish a connection to it.  This can be done with the Ruby socket module.  We must verify that we can recieve a HELLO from it. 

Next, we send it something to which we know what its response should be.  This is not clear from the specification.  The response must be equal to the response we expected.  

Unfortunately, I'm not sure how to test TcpServer's response without testing HttpServer...  In other words, the response from a connection to a TcpServer is really just the response from an HttpServer forwarded to the connecting agent.  

In the light of the previous realization, we know that the only contained test can be that we get a response, and not what it looks like.  Therefore, we can test the response to a connection to not be nil, but cannot look at its contents or make any judgment on them.  
